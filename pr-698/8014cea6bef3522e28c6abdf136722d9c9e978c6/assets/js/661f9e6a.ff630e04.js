"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[932],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var g=r.createContext({}),c=function(e){var n=r.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=c(e.components);return r.createElement(g.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,g=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(t),s=o,d=u["".concat(g,".").concat(s)]||u[s]||p[s]||i;return t?r.createElement(d,a(a({ref:n},m),{},{components:t})):r.createElement(d,a({ref:n},m))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=s;var l={};for(var g in n)hasOwnProperty.call(n,g)&&(l[g]=n[g]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},7331:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>g,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>u});t(7294);var r=t(3905);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const l={sidebar_label:"Hugging Face"},g="Hugging Face",c={unversionedId:"modules/model_io/models/llms/Integrations/huggingface",id:"modules/model_io/models/llms/Integrations/huggingface",title:"Hugging Face",description:"Overview",source:"@site/docs/modules/model_io/models/llms/Integrations/huggingface.mdx",sourceDirName:"modules/model_io/models/llms/Integrations",slug:"/modules/model_io/models/llms/Integrations/huggingface",permalink:"/langchaingo/docs/modules/model_io/models/llms/Integrations/huggingface",draft:!1,editUrl:"https://github.com/tmc/langchaingo/edit/main/docs/docs/modules/model_io/models/llms/Integrations/huggingface.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Hugging Face"},sidebar:"sidebar",previous:{title:"LLMs",permalink:"/langchaingo/docs/modules/model_io/models/llms/"},next:{title:"Local",permalink:"/langchaingo/docs/modules/model_io/models/llms/Integrations/local"}},m={},u=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Importing Required Packages",id:"importing-required-packages",level:3},{value:"Initializing the Hugging Face Model",id:"initializing-the-hugging-face-model",level:3},{value:"Generating Text from a Prompt",id:"generating-text-from-a-prompt",level:3},{value:"Complete Example",id:"complete-example",level:2}],p={toc:u},s="wrapper";function d(e){var{components:n}=e,t=a(e,["components"]);return(0,r.kt)(s,i(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){o(e,n,t[n])}))}return e}({},p,t),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hugging-face"},"Hugging Face"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"This documentation provides a detailed overview and technical guidance for integrating the Hugging Face machine learning models with the LangchainGo library in the Go programming environment. This integration allows Go developers to leverage the power of pre-trained AI models for various applications, including natural language processing, text generation, and more."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"Go programming language installed on your machine (version 1.15 or higher recommended).\nA valid Hugging Face API token. Obtain it by creating an account on the Hugging Face platform and generating a new token"),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go get github.com/tmc/langchaingo\n")),(0,r.kt)("p",null,"Ensure that your Hugging Face API token is set as an environment variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export HUGGINGFACEHUB_API_TOKEN='your_hugging_face_api_token'\n")),(0,r.kt)("h2",{id:"implementation"},"Implementation"),(0,r.kt)("p",null,"Below is the step-by-step guide to implementing the LangchainGo with Hugging Face integration."),(0,r.kt)("h3",{id:"importing-required-packages"},"Importing Required Packages"),(0,r.kt)("p",null,"Start by creating a new Go file and import the necessary packages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "log"\n\n    "github.com/tmc/langchaingo/llms"\n    "github.com/tmc/langchaingo/llms/huggingface"\n)\n')),(0,r.kt)("h3",{id:"initializing-the-hugging-face-model"},"Initializing the Hugging Face Model"),(0,r.kt)("p",null,"In your ",(0,r.kt)("inlineCode",{parentName:"p"},"main"),' function, initialize the Hugging Face model by specifying the desired pre-trained model. In this example, we use "google/gemma-7b":'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n    llm, err := huggingface.New(huggingface.WithModel("google/gemma-7b"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    // Continue implementation...\n}\n')),(0,r.kt)("h3",{id:"generating-text-from-a-prompt"},"Generating Text from a Prompt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    ctx := context.Background()\n    prompt := "What is Golang?"\n    completion, err := llms.GenerateFromSinglePrompt(ctx, llm, prompt)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(completion)\n')),(0,r.kt)("h2",{id:"complete-example"},"Complete Example"),(0,r.kt)("p",null,"Here is the complete code sample for generating text using LangchainGo integrated with Hugging Face:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "log"\n\n    "github.com/tmc/langchaingo/llms"\n    "github.com/tmc/langchaingo/llms/huggingface"\n)\n\nfunc main() {\n    llm, err := huggingface.New(huggingface.WithModel("google/gemma"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    ctx := context.Background()\n    prompt := "What is Golang?"\n    completion, err := llms.GenerateFromSinglePrompt(ctx, llm, prompt)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(completion)\n}\n')))}d.isMDXComponent=!0}}]);