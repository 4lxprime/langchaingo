"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[600],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,f=u["".concat(s,".").concat(d)]||u[d]||p[d]||a;return n?r.createElement(f,i(i({ref:t},m),{},{components:n})):r.createElement(f,i({ref:t},m))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4813:(e,t,n)=>{n.d(t,{Z:()=>y});var r=n(7294),o=n(6010),a=n(3605),i=n(1984),l=n(7785),s=n(2210);const c={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};function m({href:e,children:t}){return r.createElement(i.Z,{href:e,className:(0,o.Z)("card padding--lg",c.cardContainer)},t)}function u({href:e,icon:t,title:n,description:a}){return r.createElement(m,{href:e},r.createElement("h2",{className:(0,o.Z)("text--truncate",c.cardTitle),title:n},t," ",n),a&&r.createElement("p",{className:(0,o.Z)("text--truncate",c.cardDescription),title:a},a))}function p({item:e}){const t=(0,a.Wl)(e);return t?r.createElement(u,{href:t,icon:"\ud83d\uddc3\ufe0f",title:e.label,description:null!==(n=e.description)&&void 0!==n?n:(0,s.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:e.items.length})}):null;var n}function d({item:e}){var t;const n=(0,l.Z)(e.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17";var o;const i=(0,a.xz)(null!==(o=e.docId)&&void 0!==o?o:void 0);var s;return r.createElement(u,{href:e.href,icon:n,title:e.label,description:null!==(s=e.description)&&void 0!==s?s:null===(t=i)||void 0===t?void 0:t.description})}function f({item:e}){switch(e.type){case"link":return r.createElement(d,{item:e});case"category":return r.createElement(p,{item:e});default:throw new Error(`unknown item type ${JSON.stringify(e)}`)}}function g({className:e}){const t=(0,a.jA)();return r.createElement(y,{items:t.items,className:e})}function y(e){const{items:t,className:n}=e;if(!t)return r.createElement(g,e);const i=(0,a.MN)(t);return r.createElement("section",{className:(0,o.Z)("row",n)},i.map(((e,t)=>r.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},r.createElement(f,{item:e})))))}},8058:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>g,frontMatter:()=>s,metadata:()=>m,toc:()=>p});n(7294);var r=n(3905),o=n(4813);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const s={sidebar_position:1,hide_table_of_contents:!0,sidebar_label:"LLMs"},c="LLMs",m={unversionedId:"modules/model_io/models/llms/index",id:"modules/model_io/models/llms/index",title:"LLMs",description:"Conceptual Guide",source:"@site/docs/modules/model_io/models/llms/index.mdx",sourceDirName:"modules/model_io/models/llms",slug:"/modules/model_io/models/llms/",permalink:"/langchaingo/docs/modules/model_io/models/llms/",draft:!1,editUrl:"https://github.com/tmc/langchaingo/edit/main/docs/docs/modules/model_io/models/llms/index.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,hide_table_of_contents:!0,sidebar_label:"LLMs"},sidebar:"sidebar",previous:{title:"Models",permalink:"/langchaingo/docs/modules/model_io/models/"},next:{title:"Hugging Face",permalink:"/langchaingo/docs/modules/model_io/models/llms/Integrations/huggingface"}},u={},p=[],d={toc:p},f="wrapper";function g(e){var{components:t}=e,n=l(e,["components"]);return(0,r.kt)(f,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},d,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"llms"},"LLMs"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://python.langchain.com/docs/modules/model_io/llms"},"Conceptual Guide"))),(0,r.kt)("p",null,"Large Language Models (LLMs) are a core component of LangChain.\nLangChain does not serve it's own LLMs, but rather provides a standard interface for interacting with many different LLMs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type LLM interface {\n    Call(ctx context.Context, prompt string, options ...CallOption) (string, error)\n    Generate(ctx context.Context, prompts []string, options ...CallOption) ([]*Generation, error)\n}\n")),(0,r.kt)("p",null,"As you can see LLMs expose two main methods. The Call metod takes a prompt and returns a completion and an evetuall error.\nWith the generate method you can take multiple prompts and get a generation for each of the prompts."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// Generation is a single generation from a langchaingo LLM.\ntype Generation struct {\n    // Text is the generated text.\n    Text string `json:"text"`\n    // Message stores the potentially generated message.\n    Message *schema.AIChatMessage `json:"message"`\n    // GenerationInfo is the generation info. This can contain vendor-specific information.\n    GenerationInfo map[string]any `json:"generation_info"`\n}\n')),(0,r.kt)("p",null,"Beacuse all LLMs also implement the LanguageModel interface, you can also use the GeneratePrompt and GetNumTokens functions on all of the LLMs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// LanguageModel is the interface all language models must implement.\ntype LanguageModel interface {\n    // Take in a list of prompt values and return an LLMResult.\n    GeneratePrompt(ctx context.Context, prompts []schema.PromptValue, options ...CallOption) (LLMResult, error)\n    // Get the number of tokens present in the text.\n    GetNumTokens(text string) int\n}\n")),(0,r.kt)(o.Z,{mdxType:"DocCardList"}))}g.isMDXComponent=!0}}]);