"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[75],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(r),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4813:(e,t,r)=>{r.d(t,{Z:()=>h});var n=r(7294),o=r(6010),a=r(3605),i=r(1984),c=r(7785),s=r(2210);const l={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};function p({href:e,children:t}){return n.createElement(i.Z,{href:e,className:(0,o.Z)("card padding--lg",l.cardContainer)},t)}function u({href:e,icon:t,title:r,description:a}){return n.createElement(p,{href:e},n.createElement("h2",{className:(0,o.Z)("text--truncate",l.cardTitle),title:r},t," ",r),a&&n.createElement("p",{className:(0,o.Z)("text--truncate",l.cardDescription),title:a},a))}function d({item:e}){const t=(0,a.Wl)(e);return t?n.createElement(u,{href:t,icon:"\ud83d\uddc3\ufe0f",title:e.label,description:null!==(r=e.description)&&void 0!==r?r:(0,s.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:e.items.length})}):null;var r}function m({item:e}){var t;const r=(0,c.Z)(e.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17";var o;const i=(0,a.xz)(null!==(o=e.docId)&&void 0!==o?o:void 0);var s;return n.createElement(u,{href:e.href,icon:r,title:e.label,description:null!==(s=e.description)&&void 0!==s?s:null===(t=i)||void 0===t?void 0:t.description})}function f({item:e}){switch(e.type){case"link":return n.createElement(m,{item:e});case"category":return n.createElement(d,{item:e});default:throw new Error(`unknown item type ${JSON.stringify(e)}`)}}function g({className:e}){const t=(0,a.jA)();return n.createElement(h,{items:t.items,className:e})}function h(e){const{items:t,className:r}=e;if(!t)return n.createElement(g,e);const i=(0,a.MN)(t);return n.createElement("section",{className:(0,o.Z)("row",r)},i.map(((e,t)=>n.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},n.createElement(f,{item:e})))))}},8674:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>d});r(7294);var n=r(3905),o=r(4813);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const s={hide_table_of_contents:!0,sidebar_position:4},l="Retrievers",p={unversionedId:"modules/data_connection/retrievers/index",id:"modules/data_connection/retrievers/index",title:"Retrievers",description:"Conceptual Guide",source:"@site/docs/modules/data_connection/retrievers/index.mdx",sourceDirName:"modules/data_connection/retrievers",slug:"/modules/data_connection/retrievers/",permalink:"/langchaingo/docs/modules/data_connection/retrievers/",draft:!1,editUrl:"https://github.com/tmc/langchaingo/edit/main/docs/docs/modules/data_connection/retrievers/index.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{hide_table_of_contents:!0,sidebar_position:4},sidebar:"sidebar",previous:{title:"Examples",permalink:"/langchaingo/docs/modules/data_connection/text_splitters/examples/"},next:{title:"Examples",permalink:"/langchaingo/docs/modules/memory/examples/"}},u={},d=[{value:"Reasons for Using a Retriever:",id:"reasons-for-using-a-retriever",level:2},{value:"How To",id:"how-to",level:2}],m={toc:d},f="wrapper";function g(e){var{components:t}=e,r=c(e,["components"]);return(0,n.kt)(f,i(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){a(e,t,r[t])}))}return e}({},m,r),{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"retrievers"},"Retrievers"),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{parentName:"p",href:"https://python.langchain.com/docs/modules/data_connection/retrievers/"},"Conceptual Guide"))),(0,n.kt)("p",null,'The concept of a "retriever" within a language or framework, particularly in blockchain contexts, refers to a mechanism designed to extract or fetch data from a designated source. In the realm of blockchain, this could involve retrieving transaction details, block information, or the states of smart contracts from the blockchain\'s ledger.'),(0,n.kt)("h2",{id:"reasons-for-using-a-retriever"},"Reasons for Using a Retriever:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Data Accessibility"),": Provides a gateway for accessing data stored on the blockchain, crucial for applications needing to present this information to users or leverage it for further processing.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Efficiency"),": Optimizes the process of fetching data, reducing latency and enhancing the performance of blockchain applications.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Abstraction"),": Simplifies querying the blockchain by hiding its underlying complexity, offering developers a more straightforward API.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Integration"),": Enables the seamless incorporation of blockchain data into other applications or services, broadening potential use cases and functionalities.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Security"),": Allows applications to access blockchain data safely without direct ledger interactions, minimizing exposure to security risks."))),(0,n.kt)("h2",{id:"how-to"},"How To"),(0,n.kt)("p",null,"The implementation of a retriever varies depending on the blockchain platform and the specific data requirements. However, the general process involves the following steps:"),(0,n.kt)("p",null,"You need use a embedder, can you ollama, huggingface .."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'    llm, err := ollama.New(ollama.WithModel("llama2"))\n\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    embedder, err := embeddings.NewEmbedder(llm)\n    if err != nil {\n        log.Fatal(err)\n    }\n')),(0,n.kt)("p",null,"After it chose a storage vector like pinecone, postgres, Qdrant, in example I'll use qdrant"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'    url, err := url.Parse("http://localhost:6333")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    store, err := qdrant.New(\n        qdrant.WithURL(*url),\n        qdrant.WithCollectionName("youtube_transcript"),\n        qdrant.WithEmbedder(embedder),\n    )\n    if err != nil {\n        log.Fatal(err)\n    }\n\n\n')),(0,n.kt)("p",null,"Now Create a retriever"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'    searchQuery := "how to make a cake"\n    optionsVector := []vectorstores.Option{\n        vectorstores.WithScoreThreshold(0.80), // use for precision, when you want to get only the most relevant documents\n        //vectorstores.WithNameSpace(""),            // use for set a namespace in the storage\n        //vectorstores.WithFilters(map[string]interface{}{"language": "en"}), // use for filter the documents\n        //vectorstores.WithEmbedder(embedder), // use when you want add documents or doing similarity search\n        //vectorstores.WithDeduplicater(vectorstores.NewSimpleDeduplicater()), //  This is useful to prevent wasting time on creating an embedding\n    }\n\n    retriever := vectorstores.ToRetriever(store, 10, optionsVector...)\n    // search\n    resDocs, err := retriever.GetRelevantDocuments(context.Background(), searchQuery)\n\n    if err != nil {\n        log.Fatal(err)\n    }\n')),(0,n.kt)("p",null,"This is a simple example of how to use a retriever, you can use it in a lot of ways, like a chatbot, a search engine, a recommendation system, etc."),(0,n.kt)(o.Z,{mdxType:"DocCardList"}))}g.isMDXComponent=!0}}]);